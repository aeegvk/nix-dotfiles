{
  description = "Aee’s unified Dev flake: Home-Manager + DevShells";

  inputs = {
    # Pin nixpkgs
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-23.11";

    # Home-Manager must follow the same nixpkgs
    home-manager = {
      url = "github:nix-community/home-manager/release-23.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # Utilities for writing multi-system flakes
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, home-manager, flake-utils, ... }:
    # The outputs are now a merge of two attribute sets.
    # 1. The top-level homeConfigurations that home-manager CLI expects.
    # 2. The per-system outputs generated by flake-utils.
    {
      # ─────────────────────────────────────────────────────────────────────────
      # 1) Home-Manager config for user “aee”
      #    Defined at the top level so the `home-manager` CLI can find it.
      # ─────────────────────────────────────────────────────────────────────────
      homeConfigurations."aee" = home-manager.lib.homeManagerConfiguration {
        # This configuration now explicitly targets a single system.
        # This is generally fine for a personal configuration.
        pkgs = import nixpkgs {
          system = "x86_64-linux";
          config.allowUnfree = true;
        };

        # The module containing your user configuration.
        modules = [
          ({ config, pkgs, lib, ... }: {
            home.username      = "aee";
            home.homeDirectory = "/home/aee";
            home.stateVersion  = "23.11";

            home.packages = with pkgs; [
              # --- Fonts ---
              noto-fonts

              # --- GUI Applications ---
              google-chrome
              brave
              zed
              sublime-merge
              dbeaver
              obs-studio
              inkscape

              # --- System & CLI Tools ---
              git
              neovim
              fastfetch
              docker
              docker-compose
              flatpak

              # --- Runtimes ---
              elixir
              erlang
              python3
              nodejs
              yarn
            ];

            home.file = {
              "bin/install-nix.sh" = {
                text       = builtins.readFile ./install-nix.sh;
                executable = true;
              };
            };

            programs.zsh = {
              enable           = true;
              enableCompletion = true;

              syntaxHighlighting.enable = true;
            };

            # Set zsh as default shell
            programs.home-manager.enable = true;

            # CORRECTED: Use `home.sessionVariables` for user-level environment variables
            home.sessionVariables = {
              EDITOR = "zed";
            };
          })
        ];
      };
    } // flake-utils.lib.eachDefaultSystem (system:
      # ─────────────────────────────────────────────────────────────────────────
      # 2) Global devShells for each system, generated by flake-utils
      # ─────────────────────────────────────────────────────────────────────────
      let
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
        };
      in
      {
        devShells = {
          default = pkgs.mkShell {
            buildInputs = with pkgs; [
              elixir erlang python3 nodejs yarn docker docker-compose
            ];
            shellHook = ''
              export EDITOR=zed-editor
              echo "🚀 Aee’s global dev shell"
            '';
          };
          python = pkgs.mkShell {
            buildInputs = with pkgs; [ python3 pipenv poetry ];
            shellHook  = "echo \"🐍 Python shell with pipenv & poetry\"";
          };
          node = pkgs.mkShell {
            buildInputs = with pkgs; [ nodejs yarn pnpm ];
            shellHook  = "echo \"🔧 Node.js shell with Yarn & PNPM\"";
          };
        };
      });
}
